diff --git a/node_modules/react-native-bootsplash/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplash.java b/node_modules/react-native-bootsplash/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplash.java
index ed3f243..5fe0b4f 100644
--- a/node_modules/react-native-bootsplash/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplash.java
+++ b/node_modules/react-native-bootsplash/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplash.java
@@ -2,7 +2,10 @@ package com.zoontek.rnbootsplash;
 
 import android.app.Activity;
 
+import java.util.function.Function;
+
 import androidx.annotation.DrawableRes;
+import androidx.annotation.LayoutRes;
 import androidx.annotation.NonNull;
 
 public class RNBootSplash {
@@ -10,4 +13,8 @@ public class RNBootSplash {
   public static void init(final @DrawableRes int drawableResId, @NonNull final Activity activity) {
     RNBootSplashModule.init(drawableResId, activity);
   }
+
+  public static void initLayout(final @LayoutRes int layoutResId, @NonNull final Activity activity, Function doneCallback) {
+    RNBootSplashModule.initLayout(layoutResId, activity, doneCallback);
+  }
 }
diff --git a/node_modules/react-native-bootsplash/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplashModule.java b/node_modules/react-native-bootsplash/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplashModule.java
index db52c9e..31c1057 100644
--- a/node_modules/react-native-bootsplash/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplashModule.java
+++ b/node_modules/react-native-bootsplash/android/src/main/java/com/zoontek/rnbootsplash/RNBootSplashModule.java
@@ -3,12 +3,16 @@ package com.zoontek.rnbootsplash;
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.app.Activity;
+import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.Window;
+import android.view.WindowManager;
 import android.view.animation.AccelerateInterpolator;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.LinearLayout;
-import android.widget.LinearLayout.LayoutParams;
+import android.widget.RelativeLayout;
+import android.view.ViewGroup.LayoutParams;
 
 import androidx.annotation.DrawableRes;
 import androidx.annotation.NonNull;
@@ -24,6 +28,7 @@ import com.facebook.react.module.annotations.ReactModule;
 import java.util.ArrayList;
 import java.util.Timer;
 import java.util.TimerTask;
+import java.util.function.Function;
 
 @ReactModule(name = RNBootSplashModule.MODULE_NAME)
 public class RNBootSplashModule extends ReactContextBaseJavaModule implements LifecycleEventListener {
@@ -39,10 +44,10 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
   }
 
   private static int mDrawableResId = -1;
+  private static int mLayoutResId = -1;
   private static final ArrayList<RNBootSplashTask> mTaskQueue = new ArrayList<>();
   private static Status mStatus = Status.HIDDEN;
   private static boolean mIsAppInBackground = false;
-
   public RNBootSplashModule(ReactApplicationContext reactContext) {
     super(reactContext);
     reactContext.addLifecycleEventListener(this);
@@ -53,15 +58,20 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
     return MODULE_NAME;
   }
 
-  private static LinearLayout getLayout(@NonNull Activity activity, LayoutParams params) {
-    LinearLayout layout = new LinearLayout(activity);
-    View view = new View(activity);
+  private static ViewGroup getLayout(@NonNull Activity activity, LayoutParams params) {
+    ViewGroup layout;
+    if (mDrawableResId != -1) {
+      layout = new LinearLayout(activity);
+      View view = new View(activity);
+      view.setBackgroundResource(mDrawableResId);
+      layout.addView(view, params);
+      ((LinearLayout)layout).setOrientation(LinearLayout.VERTICAL);
+    } else {
+      layout = (ViewGroup) LayoutInflater.from(activity).inflate(mLayoutResId, null, false);
+    }
 
-    view.setBackgroundResource(mDrawableResId);
     layout.setId(R.id.bootsplash_layout_id);
     layout.setLayoutTransition(null);
-    layout.setOrientation(LinearLayout.VERTICAL);
-    layout.addView(view, params);
 
     return layout;
   }
@@ -71,8 +81,8 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
       @Override
       public void run() {
         if (activity == null
-          || activity.isFinishing()
-          || activity.findViewById(R.id.bootsplash_layout_id) != null) {
+                || activity.isFinishing()
+                || activity.findViewById(R.id.bootsplash_layout_id) != null) {
           return;
         }
 
@@ -80,12 +90,34 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
         mStatus = Status.VISIBLE;
 
         LayoutParams params = new LayoutParams(
-          LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+                LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
         activity.addContentView(getLayout(activity, params), params);
       }
     });
   }
 
+  public static void initLayout(final int layoutResId, final Activity activity, Function doneCallback) {
+    UiThreadUtil.runOnUiThread(new Runnable() {
+      @Override
+      public void run() {
+        if (activity == null
+                || activity.isFinishing()
+                || activity.findViewById(R.id.bootsplash_layout_id) != null) {
+          return;
+        }
+
+        mLayoutResId = layoutResId;
+        mStatus = Status.VISIBLE;
+
+        LayoutParams params = new LayoutParams(
+                LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+        activity.addContentView(getLayout(activity, params), params);
+
+        doneCallback.apply(null);
+      }
+    });
+  }
+
   @Override
   public void onHostDestroy() {
     mIsAppInBackground = true;
@@ -103,11 +135,11 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
   }
 
   private void shiftNextTask() {
-    boolean shouldSkipTick = mDrawableResId == -1
-      || mStatus == Status.TRANSITIONING_TO_VISIBLE
-      || mStatus == Status.TRANSITIONING_TO_HIDDEN
-      || mIsAppInBackground
-      || mTaskQueue.isEmpty();
+    boolean shouldSkipTick = (mDrawableResId == -1 && mLayoutResId == -1)
+            || mStatus == Status.TRANSITIONING_TO_VISIBLE
+            || mStatus == Status.TRANSITIONING_TO_HIDDEN
+            || mIsAppInBackground
+            || mTaskQueue.isEmpty();
 
     if (shouldSkipTick) return;
 
@@ -156,28 +188,28 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
         mStatus = Status.TRANSITIONING_TO_VISIBLE;
 
         LayoutParams params = new LayoutParams(
-          LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
-        LinearLayout layout = getLayout(activity, params);
+                LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+        ViewGroup layout = getLayout(activity, params);
 
         if (task.getFade()) {
           layout.setAlpha(0.0f);
           activity.addContentView(layout, params);
 
           layout
-            .animate()
-            .setDuration(ANIMATION_DURATION)
-            .alpha(1.0f)
-            .setInterpolator(new DecelerateInterpolator())
-            .setListener(new AnimatorListenerAdapter() {
-              @Override
-              public void onAnimationEnd(Animator animation) {
-                super.onAnimationEnd(animation);
-                mStatus = Status.VISIBLE;
-                promise.resolve(true);
-                shiftNextTask();
-              }
-            })
-            .start();
+                  .animate()
+                  .setDuration(ANIMATION_DURATION)
+                  .alpha(1.0f)
+                  .setInterpolator(new DecelerateInterpolator())
+                  .setListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                      super.onAnimationEnd(animation);
+                      mStatus = Status.VISIBLE;
+                      promise.resolve(true);
+                      shiftNextTask();
+                    }
+                  })
+                  .start();
         } else {
           activity.addContentView(layout, params);
           mStatus = Status.VISIBLE;
@@ -199,8 +231,10 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
           waitAndShiftNextTask();
           return;
         }
+        setWindowFlag(activity, WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, false);
+        setWindowFlag(activity, WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION, false);
 
-        final LinearLayout layout = activity.findViewById(R.id.bootsplash_layout_id);
+        final RelativeLayout layout = activity.findViewById(R.id.bootsplash_layout_id);
 
         if (layout == null) {
           promise.resolve(true); // splash screen is already hidden
@@ -214,23 +248,23 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
 
         if (task.getFade()) {
           layout
-            .animate()
-            .setDuration(ANIMATION_DURATION)
-            .alpha(0.0f)
-            .setInterpolator(new AccelerateInterpolator())
-            .setListener(new AnimatorListenerAdapter() {
-              @Override
-              public void onAnimationEnd(Animator animation) {
-                super.onAnimationEnd(animation);
-
-                if (parent != null)
-                  parent.removeView(layout);
-
-                mStatus = Status.HIDDEN;
-                promise.resolve(true);
-                shiftNextTask();
-              }
-            }).start();
+                  .animate()
+                  .setDuration(ANIMATION_DURATION)
+                  .alpha(0.0f)
+                  .setInterpolator(new AccelerateInterpolator())
+                  .setListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                      super.onAnimationEnd(animation);
+
+                      if (parent != null)
+                        parent.removeView(layout);
+
+                      mStatus = Status.HIDDEN;
+                      promise.resolve(true);
+                      shiftNextTask();
+                    }
+                  }).start();
         } else {
           parent.removeView(layout);
           mStatus = Status.HIDDEN;
@@ -241,9 +275,20 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
     });
   }
 
+  public static void setWindowFlag(Activity activity, final int bits, boolean on) {
+    Window win = activity.getWindow();
+    WindowManager.LayoutParams winParams = win.getAttributes();
+    if (on) {
+      winParams.flags |= bits;
+    } else {
+      winParams.flags &= ~bits;
+    }
+    win.setAttributes(winParams);
+  }
+
   @ReactMethod
   public void show(final boolean fade, final Promise promise) {
-    if (mDrawableResId == -1) {
+    if (mDrawableResId == -1 && mLayoutResId == -1) {
       promise.reject("uninitialized_module", "react-native-bootsplash has not been initialized");
     } else {
       mTaskQueue.add(new RNBootSplashTask(RNBootSplashTask.Type.SHOW, fade, promise));
@@ -253,7 +298,7 @@ public class RNBootSplashModule extends ReactContextBaseJavaModule implements Li
 
   @ReactMethod
   public void hide(final boolean fade, final Promise promise) {
-    if (mDrawableResId == -1) {
+    if (mDrawableResId == -1 && mLayoutResId == -1) {
       promise.reject("uninitialized_module", "react-native-bootsplash has not been initialized");
     } else {
       mTaskQueue.add(new RNBootSplashTask(RNBootSplashTask.Type.HIDE, fade, promise));
